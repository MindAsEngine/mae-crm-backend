services:

  frontend:
    restart: unless-stopped
    build:
      context: ./mae-crm-frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./mae-crm-frontend/src:/app/src
      - ./mae-crm-frontend/public:/app/public
    networks:
      - app-network

  mongodb:
    image: mongo:6
    container_name: mongodb
    env_file: 
      - ./environment.env
    volumes:
      - auth_data:/data/db
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    ports:
      - "27017:27017"
    networks:
      - app-network

  auth-service:
    build: ./auth-service
    container_name: auth-service
    depends_on:
      - mongodb
    env_file: 
      - ./environment.env
    ports:
      - "8082:8081"
    networks:
      - app-network

  # Reporting Service
  reporting-service:     
    restart: unless-stopped
    build:
      context: ./reporting-service
      dockerfile: Dockerfile
    container_name: reporting-service
    ports:
      - "8080:8080"
    volumes:
      - export_data:/app/export
    env_file: 
      - ./environment.env
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "http://reporting-service:8080/api/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      # mysql:
      #   condition: service_healthy
      db:
        condition: service_healthy
      auth-service:
        condition: service_started
  
  ads-integration-service:
    restart: unless-stopped
    container_name: ads-integration-service
    build:
      context: ./ads-integration-service
      dockerfile: Dockerfile
    env_file: 
      - ./environment.env
    volumes:
      - ads_integration_volume:/app
    depends_on:
      reporting-service:
        condition: service_started
      db:
        condition: service_healthy
    networks:
    - app-network
  
  # PostgreSQL
  db:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: postgres
    env_file: 
      - ./environment.env
    ports:
      - "55432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d reports_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - rabbitmq
    networks:
      - app-network

  # RabbitMQ
  rabbitmq:
    restart: unless-stopped
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file: 
      - ./environment.env  
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  auth_data:
  postgres_data:
  mysql_data:
  rabbitmq_data:
  ads_integration_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./ads-integration-service/
  export_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./reporting-service/export
  # es_data:
  # redis_data:

networks:
  app-network:
    driver: bridge