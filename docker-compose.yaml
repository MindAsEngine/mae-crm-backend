services:

  frontend:
    restart: unless-stopped
    build:
      context: ./mae-crm-frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./mae-crm-frontend/src:/app/src
      - ./mae-crm-frontend/public:/app/public
    networks:
      - app-network

  mongodb:
    image: mongo:6
    container_name: mongodb
    env_file: 
      - ./.env
    volumes:
      - auth_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - app-network

  auth-service:
    build: ./auth-service
    container_name: auth-service
    depends_on:
      - mongodb
    env_file: 
      - ./.env
    ports:
      - "8081:8081"
    networks:
      - app-network

  # Reporting Service
  reporting-service:     
    restart: unless-stopped
    build:
      context: ./reporting-service
      dockerfile: Dockerfile
    container_name: reporting-service
    ports:
      - "8080:8080"
    volumes:
      - export_data:/app/export
    env_file: 
      - ./.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "http://reporting-service:8080/api/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      mysql:
        condition: service_healthy
      db:
        condition: service_healthy
      auth-service:
        condition: service_started
  
  ads-integration-service:
    restart: unless-stopped
    container_name: ads-integration-service
    build:
      context: ./ads-integration-service
      dockerfile: Dockerfile
    env_file: 
      - ./.env
    volumes:
      - ads_integration_volume:/app
    depends_on:
      mysql:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
    - app-network
  
  # PostgreSQL
  db:
    image: postgres:15
    container_name: postgres
    env_file: 
      - ./.env
    ports:
      - "55432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d reports_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - rabbitmq
      # - redis
      # - elasticsearch
    networks:
      - app-network

  # MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql
    env_file: 
      - ./.env
    ports:
      - "33306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: --default-authentication-plugin=mysql_native_password
    depends_on:
      - rabbitmq
      # - redis
      # - elasticsearch
    networks:
      - app-network

  # RabbitMQ
  rabbitmq:
    restart: unless-stopped
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file: 
      - ./.env  
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Elasticsearch
  # elasticsearch:
  #   restart: unless-stopped
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #   ports:
  #     - "8088:9200"
  #     - "8089:9300"
  #   volumes:
  #     - es_data:/usr/share/elasticsearch/data
  #   networks:
  #     - app-network

  #  Redis
  #   redis:
  #     restart: unless-stopped
  #     image: redis:7
  #     container_name: redis
  #     volumes:
  #       - redis_data:/data
  #     ports:
  #       - "6379:6379"
  #     networks:
  #       - app-network


volumes:
  auth_data:
  postgres_data:
  mysql_data:
  rabbitmq_data:
  ads_integration_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./ads-integration-service/
  export_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./reporting-service/export
  # es_data:
  # redis_data:

networks:
  app-network:
    driver: bridge